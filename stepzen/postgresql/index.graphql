type Comment {
  created_at: DateTime!
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subreddit_id: ID
  title: String
  username: String
  votes: [Vote] 
    @materializer(
      query: "votesByPostId",
      arguments: [{ name: "post_id", field: "id"}]
    )
  comments: [Comment]
    @materializer(
      query: "commentByPostId"
      arguments: [{ name: "post_id", field: "id"}]
    )
  subreddit: [Subreddit]
    @materializer(
      query: "subredditListById",
      arguments: [{ name: "id", field: "subreddit_id"}]
    )
}

type Subreddit {
  created_at: DateTime!
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime!
  id: ID!
  post_id: ID
  upvote: Boolean
  username: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * from "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  votesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query:"""
      SELECT * FROM "vote" WHERE "post_id" = $1
      ORDER BY "created_at" DESC
      """
      configuration: "postgresql_config"
    )
  subredditListById(id: ID!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  
  subredditListLimit(limit: Int!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "subreddit"
      ORDER BY "created_at" DESC
      LIMIT $1
      """
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  postBySubreddit_id(subreddit_id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postBySubreddit_idAndBody(subreddit_id: ID!, body: String!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "post"
      ORDER BY "post"."created_at" DESC
      """
      configuration: "postgresql_config"
    )
  postListByPostId(post_id: ID!): Post 
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "post"
      WHERE "post"."id" = $1
      """
    )
  postListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT *, "post".ID AS ID FROM "post"
      JOIN "subreddit" ON "subreddit"."id" = "post"."subreddit_id"
      WHERE "subreddit"."topic" = $1
      ORDER BY "post"."created_at" DESC
      """
      configuration: "postgresql_config"
    )
  postPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "post" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subreddit' "
  subredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  subredditListByTopic(topic: String): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "subreddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  subredditPaginatedList(first: Int, after: Int): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  voteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(
    username: String!
    post_id: ID!
    text: String!
    id: ID!
    created_at: DateTime!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(
    body: String!
    subreddit_id: ID!
    id: ID!
    created_at: DateTime!
    title: String!
    username: String!
    image: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    subreddit_id: ID
    title: String
    username: String
    image: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'Subreddit' "
  deleteSubreddit(topic: String!, created_at: DateTime!, id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  
  insertComment(post_id: ID!, username: String!, text:String!): Comment
    @dbquery(
      type: "postgresql"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'Vote' "
  deleteVote(
    username: String!
    post_id: ID!
    id: ID!
    created_at: DateTime!
    upvote: Boolean!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(post_id: ID!, username: String!, upvote: Boolean!): Vote
    @dbquery(
      type: "postgresql"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
